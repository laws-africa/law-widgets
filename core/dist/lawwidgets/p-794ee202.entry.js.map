{"version":3,"names":["TableOfContents","this","expandIconHtml","collapseIconHtml","PROVIDER","parseItemsProp","newValue","innerItems","JSON","parse","Array","isArray","refetch","fetchContent","ensurePartner","fetch","frbrExpressionUri","provider","url","partner","resp","ok","json","toc","error","getPartner","getSlotHTML","selector","element","el","querySelector","_a","innerHTML","componentWillLoad","items","titleFilterChanged","titleFilter","expandAll","from","querySelectorAll","forEach","item","expanded","collapseAll","filter","needle","toLocaleLowerCase","trim","filteredItems","Set","includeKids","child","children","add","shouldInclude","include","title","includes","renderItem","kids","map","undefined","h","render","Host","key","style","display","name"],"sources":["src/components/table-of-contents/table-of-contents.tsx"],"sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport { Prop, h, Element, Method, Watch, State, Component, Host } from '@stencil/core';\n\nimport { PROVIDER, getPartner } from '../../utils/services';\n\n/**\n * An item in the table of contents. Each item must have a `title` attribute (which may be `null`),\n * and a `children` attribute (which may be `null`).\n */\nexport interface TOCItem {\n  title?: string;\n  id?: string;\n  href?: string;\n  expanded?: boolean;\n  children?: TOCItem[];\n}\n\n@Component({\n  tag: 'la-table-of-contents',\n})\nexport class TableOfContents {\n  /**\n   * JSON value or string value parsed to array of items used to build the table of contents. Each item must have\n   * a `title` attribute (which may be `null`), and a `children` attribute (which may be `null`).\n   *\n   * Items may optionally have an id attribute and an href attribute, which are used to build the links for each item.\n   * */\n  @Prop() items: TOCItem[] | string = [];\n\n  /**\n   * value to filter items by item title\n   * */\n  @Prop() titleFilter = '';\n\n  /**\n   * Should items be expanded by default? This can be overridden by setting the expanded property for individual items.\n   * */\n  @Prop() expanded = true;\n\n  /** Full Akoma Ntoso FRBR Expression URI to fetch TOC information for. Only used if `fetch` is set. */\n  @Prop({ reflect: true, mutable: true }) frbrExpressionUri?: string;\n  /** Fetch content from Laws.Africa services? Requires a Laws.Africa partnership and the frbrExpressionUri property to be set. */\n  @Prop({ reflect: true, mutable: true }) fetch = false;\n  /** Partner code to use when fetching content from Laws.Africa. Defaults to the `location.hostname`. */\n  @Prop({ reflect: true, mutable: true }) partner?: string;\n  /** Provider URL for fetching content (advanced usage only). */\n  @Prop() provider = PROVIDER;\n\n  @State() filteredItems: Set<TOCItem> | null = null;\n\n  @State() innerItems: TOCItem[] = [];\n\n  @Element() el!: HTMLElement;\n\n  protected expandIconHtml = '';\n  protected collapseIconHtml = '';\n\n  @Watch('items')\n  parseItemsProp(newValue: any) {\n    if (typeof newValue === 'string') {\n      this.innerItems = JSON.parse(newValue);\n    } else if (Array.isArray(newValue)) {\n      this.innerItems = [...newValue];\n    }\n  }\n\n  @Watch('provider')\n  @Watch('frbrExpressionUri')\n  @Watch('fetch')\n  refetch() {\n    this.fetchContent();\n  }\n\n  async fetchContent() {\n    this.ensurePartner();\n\n    if (this.fetch && this.frbrExpressionUri && this.provider) {\n      const url = this.provider + '/p/' + this.partner + '/e/we/toc.json' + this.frbrExpressionUri;\n      try {\n        const resp = await fetch(url);\n        if (resp.ok) {\n          // @ts-ignore\n          this.innerItems = (await resp.json()).toc;\n        }\n      } catch (error) {\n        // ignore\n      }\n    }\n  }\n\n  ensurePartner() {\n    if (!this.partner) {\n      this.partner = getPartner();\n    }\n  }\n\n  getSlotHTML(selector: string) {\n    const element = this.el.querySelector(selector);\n    /**\n     * If slots originate from `la-table-of-contents`, query for slot html is\n     * `this.el.querySelector(\"[slot]\").innerHTML`\n     * If slot originate from `la-table-of-contents-controller` query for slot html is\n     * `this.el.querySelector(\"[slot] [slot]\").innerHTML`\n     * */\n\n    // Slots originating from la-table-of-content-controller\n    if (element?.querySelector(selector)) {\n      return element.querySelector(selector)?.innerHTML || '';\n    }\n\n    // Slots originating from la-table-of-content\n    return element?.innerHTML || '';\n  }\n\n  componentWillLoad() {\n    this.expandIconHtml = this.getSlotHTML(\"[slot='expand-icon']\");\n    this.collapseIconHtml = this.getSlotHTML(\"[slot='collapse-icon']\");\n    this.parseItemsProp(this.items);\n    this.titleFilterChanged(this.titleFilter);\n    this.fetchContent();\n  }\n\n  /**\n   * Expands all items\n   */\n  @Method()\n  async expandAll() {\n    Array.from(this.el.querySelectorAll('la-toc-item')).forEach((item) => {\n      // @ts-ignore\n      item.expanded = true;\n    });\n  }\n\n  /**\n   * Collapses all items\n   */\n  @Method()\n  async collapseAll() {\n    Array.from(this.el.querySelectorAll('la-toc-item')).forEach((item) => {\n      // @ts-ignore\n      item.expanded = false;\n    });\n  }\n\n  @Watch('titleFilter')\n  titleFilterChanged(filter: string) {\n    if (filter) {\n      const needle = filter.toLocaleLowerCase().trim();\n      const filteredItems: Set<TOCItem> = new Set<TOCItem>();\n\n      // recursively include all children\n      // eslint-disable-next-line no-inner-declarations\n      function includeKids(item: TOCItem) {\n        for (const child of item.children || []) {\n          filteredItems.add(child);\n          includeKids(child);\n        }\n      }\n\n      // Recursive function that determines whether or not an item should be rendered.\n      // An item is rendered if its title matches the filter, or any of its children should be rendered.\n      // eslint-disable-next-line no-inner-declarations\n      function shouldInclude(item: TOCItem): boolean {\n        // this will be true if this item matches the search, or any child does\n        let include: boolean = (item.title?.toLocaleLowerCase() || '').includes(needle);\n\n        if (include) {\n          // this item matches, show include all children automatically, no need to go any deeper\n          includeKids(item);\n        } else {\n          // if any children match, then this node must be included\n          if (item.children) {\n            for (const child of item.children) {\n              include = shouldInclude(child) || include;\n            }\n          }\n        }\n\n        if (include) {\n          filteredItems.add(item);\n        }\n\n        return include;\n      }\n\n      for (const item of this.innerItems) {\n        shouldInclude(item);\n      }\n\n      this.filteredItems = filteredItems;\n    } else {\n      this.filteredItems = null;\n    }\n    this.expandAll();\n  }\n\n  /**\n   * Render items recursively. We render from the bottom up, allowing us to append children into their\n   * parents. Rendering recursively here rather than inside la-toc-item means we can make use of global\n   * configuration details without having to pass them down the tree.\n   */\n  renderItem(item: TOCItem) {\n    // render the children first, so we can add them to the parent\n    const kids = (item.children || []).map((child) => this.renderItem(child));\n    // if the item has an explicit expanded value, use that, otherwise use the tree's default value\n    const expanded = item.expanded === undefined ? this.expanded : item.expanded;\n\n    return <la-toc-item\n      item={item}\n      filteredItems={this.filteredItems}\n      expandIconHtml={this.expandIconHtml}\n      collapseIconHtml={this.collapseIconHtml}\n      expanded={expanded}\n    >{kids}</la-toc-item>;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div style={{ display: 'none' }}>\n          <slot name=\"expand-icon\"></slot>\n          <slot name=\"collapse-icon\"></slot>\n        </div>\n        {this.innerItems.map((item) => this.renderItem(item))}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}