{"version":3,"names":["getAkomaNtosoElement","component","selector","HTMLElement","ownerDocument","querySelector","el","closest","AkomaNtosoTarget","callback","_this","this","target","findElement","window","MutationObserver","observer","targetDomChanged","observe","childList","prototype","getElement"],"sources":["src/utils/linking.ts"],"sourcesContent":["export function getAkomaNtosoElement(component: Element, selector?: string | HTMLElement): HTMLElement | null {\n  if (selector) {\n    return selector instanceof HTMLElement ? selector : component.ownerDocument.querySelector(selector);\n  }\n\n  // try the nearest ancestor\n  let el: HTMLElement | null = component.closest('la-akoma-ntoso');\n\n  if (!el) {\n    // try the first on the page\n    el = component.ownerDocument.querySelector('la-akoma-ntoso');\n  }\n\n  return el;\n}\n\ninterface TargetDomChangedCallback {\n  (): void;\n}\n\n/**\n * Helper class that finds an Akoma Ntoso target element on the page, and monitors it for changes.\n */\nexport class AkomaNtosoTarget {\n  selector: string | HTMLElement | undefined;\n  component: Element;\n  target: HTMLElement | null;\n  observer: MutationObserver | null;\n  callback: TargetDomChangedCallback | null;\n\n  constructor(\n    component: Element,\n    selector: string | HTMLElement | undefined,\n    callback: TargetDomChangedCallback | null\n  ) {\n    this.component = component;\n    this.selector = selector;\n    this.callback = callback;\n    this.target = this.findElement();\n\n    // setup a watcher to callback if the target content changes\n    if (this.target && window.MutationObserver) {\n      this.observer = new MutationObserver(() => {\n        this.targetDomChanged();\n      });\n      this.observer.observe(this.target, { childList: true });\n    } else {\n      this.observer = null;\n    }\n  }\n\n  getElement(): HTMLElement | null {\n    return this.target;\n  }\n\n  findElement(): HTMLElement | null {\n    if (this.selector) {\n      return this.selector instanceof HTMLElement\n        ? this.selector\n        : this.component.ownerDocument.querySelector(this.selector);\n    }\n\n    // try the nearest ancestor\n    let el: HTMLElement | null = this.component.closest('la-akoma-ntoso');\n\n    if (!el) {\n      // try the first on the page\n      el = this.component.ownerDocument.querySelector('la-akoma-ntoso');\n    }\n\n    return el;\n  }\n\n  /** The target's dom changed */\n  targetDomChanged() {\n    if (this.callback) this.callback();\n  }\n}\n"],"mappings":";;;yFAAgBA,EAAqBC,EAAoBC,GACvD,GAAIA,EAAU,CACZ,OAAOA,aAAoBC,YAAcD,EAAWD,EAAUG,cAAcC,cAAcH,E,CAI5F,IAAII,EAAyBL,EAAUM,QAAQ,kBAE/C,IAAKD,EAAI,CAEPA,EAAKL,EAAUG,cAAcC,cAAc,iB,CAG7C,OAAOC,CACT,C,iBAgBE,SAAAE,EACEP,EACAC,EACAO,GAHF,IAAAC,EAAAC,KAKEA,KAAKV,UAAYA,EACjBU,KAAKT,SAAWA,EAChBS,KAAKF,SAAWA,EAChBE,KAAKC,OAASD,KAAKE,cAGnB,GAAIF,KAAKC,QAAUE,OAAOC,iBAAkB,CAC1CJ,KAAKK,SAAW,IAAID,kBAAiB,WACnCL,EAAKO,kB,IAEPN,KAAKK,SAASE,QAAQP,KAAKC,OAAQ,CAAEO,UAAW,M,KAC3C,CACLR,KAAKK,SAAW,I,EAIpBR,EAAAY,UAAAC,WAAA,WACE,OAAOV,KAAKC,M,EAGdJ,EAAAY,UAAAP,YAAA,WACE,GAAIF,KAAKT,SAAU,CACjB,OAAOS,KAAKT,oBAAoBC,YAC5BQ,KAAKT,SACLS,KAAKV,UAAUG,cAAcC,cAAcM,KAAKT,S,CAItD,IAAII,EAAyBK,KAAKV,UAAUM,QAAQ,kBAEpD,IAAKD,EAAI,CAEPA,EAAKK,KAAKV,UAAUG,cAAcC,cAAc,iB,CAGlD,OAAOC,C,EAITE,EAAAY,UAAAH,iBAAA,WACE,GAAIN,KAAKF,SAAUE,KAAKF,U","ignoreList":[]}