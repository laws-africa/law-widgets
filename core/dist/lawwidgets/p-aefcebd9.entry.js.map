{"version":3,"names":["decorateTermsCss","LaDecorateTermsStyle0","DecorateTerms","this","defnContainers","tippies","componentWillLoad","target","AkomaNtosoTarget","el","akomaNtoso","componentDidLoad","akomaNtosoElement","getElement","tippyContainer","document","createElement","className","body","appendChild","setupDefinitions","linkTerms","makeTermLinks","changePopupDefinitions","popupDefinitions","popup","tippy","destroy","createPopups","toggleCssClasses","changeLinkTerms","classList","toggle","Array","from","querySelectorAll","forEach","def","term","_a","getAttribute","replace","closest","dataset","defines","refersto","setAttribute","appendTo","allowHTML","content","hideOnClick","interactive","maxWidth","onTrigger","bind","theme","ref","reference","defn","getDefinition","setContent","innerText","outerHTML","querySelector","addEventListener","e","HTMLElement","contains","termId","window","location","hash"],"sources":["src/components/decorate-terms/decorate-terms.scss?tag=la-decorate-terms","src/components/decorate-terms/decorate-terms.tsx"],"sourcesContent":["@use \"sass:meta\";\n\n.la-decorate-terms__popup {\n  position: relative;\n  @include meta.load-css(\"~tippy.js/dist/tippy.css\");\n  @include meta.load-css(\"~tippy.js/themes/light-border.css\");\n  @include meta.load-css(\"../../styles/tippy\");\n}\n\nla-akoma-ntoso.show-terms .akn-term {\n  text-decoration: underline dotted;\n}\n\nla-akoma-ntoso.link-terms .akn-term {\n  cursor: pointer;\n}\n","import { Component, Prop, Element, Watch } from '@stencil/core';\nimport type { Instance as Tippy } from 'tippy.js';\nimport tippy from 'tippy.js';\n\nimport { AkomaNtosoTarget } from '../../utils/linking';\n\n@Component({\n  tag: 'la-decorate-terms',\n  styleUrl: 'decorate-terms.scss',\n})\nexport class DecorateTerms {\n  // The akn content element being decorated\n  protected akomaNtosoElement?: HTMLElement | null;\n  protected defnContainers = '.akn-p, .akn-subsection, .akn-section, .akn-blockList';\n\n  protected tippies: Tippy[] = [];\n  protected tippyContainer?: HTMLElement;\n\n  @Element() el!: HTMLElement;\n\n  /**\n   * CSS selector for the la-akoma-ntoso element and HTMLElement that will be decorated. Defaults\n   * to the containing la-akoma-ntoso element, if any, otherwise the first\n   * `la-akoma-ntoso` element on the page.\n   */\n  @Prop() akomaNtoso?: string | HTMLElement;\n\n  /**\n   * If `true`, the definitions of terms will be shown as popups.\n   */\n  @Prop() popupDefinitions = false;\n\n  /**\n   * If `true`, terms will be changed to `<a>` elements that jump to the term definition.\n   */\n  @Prop() linkTerms = false;\n\n  componentWillLoad() {\n    const target = new AkomaNtosoTarget(this.el, this.akomaNtoso, () => {\n      this.componentDidLoad();\n    });\n    this.akomaNtosoElement = target.getElement();\n    this.tippyContainer = document.createElement('div');\n    this.tippyContainer.className = 'la-decorate-terms__popup';\n    document.body.appendChild(this.tippyContainer);\n  }\n\n  componentDidLoad() {\n    if (this.akomaNtosoElement) {\n      this.setupDefinitions();\n\n      if (this.linkTerms) {\n        this.makeTermLinks();\n      }\n\n      this.changePopupDefinitions(this.popupDefinitions);\n    }\n  }\n\n  @Watch('popupDefinitions')\n  changePopupDefinitions(popup: boolean) {\n    // remove existing popups\n    for (const tippy of this.tippies) {\n      tippy.destroy();\n    }\n    this.tippies = [];\n\n    if (this.akomaNtosoElement && popup) {\n      this.createPopups();\n    }\n\n    this.toggleCssClasses();\n  }\n\n  @Watch('linkTerms')\n  changeLinkTerms() {\n    this.toggleCssClasses();\n  }\n\n  toggleCssClasses() {\n    if (this.akomaNtosoElement) {\n      this.akomaNtosoElement.classList.toggle('show-terms', this.linkTerms || this.popupDefinitions);\n      this.akomaNtosoElement.classList.toggle('link-terms', this.linkTerms);\n    }\n  }\n\n  // tag term definition containers\n  setupDefinitions() {\n    if (this.akomaNtosoElement) {\n      Array.from(this.akomaNtosoElement.querySelectorAll<HTMLElement>('.akn-def[data-refersto]')).forEach((def) => {\n        const term = def.getAttribute('data-refersto')?.replace('#', '');\n        const closest: HTMLElement | null = def.closest(this.defnContainers);\n        if (closest && term) {\n          closest.dataset.defines = def.dataset.refersto;\n          closest.setAttribute('id', `defn-${term}`);\n        }\n      });\n    }\n  }\n\n  createPopups() {\n    // @ts-ignore\n    this.tippies = tippy(this.akomaNtosoElement.querySelectorAll('.akn-term'), {\n      appendTo: () => this.tippyContainer,\n      allowHTML: true,\n      content: '',\n      hideOnClick: true,\n      interactive: true,\n      maxWidth: 450,\n      onTrigger: this.onTrigger.bind(this),\n      theme: 'light-border',\n    });\n  }\n\n  onTrigger(tippy: Tippy) {\n    const ref: HTMLElement = tippy.reference as HTMLElement;\n    const defn: HTMLElement | null = this.getDefinition(ref);\n\n    if (defn) {\n      tippy.setContent(`\n        <div>\n          <div class=\"tippy-content__title\">${ref.innerText}</div>\n          <div class=\"tippy-content__body\"><la-akoma-ntoso>${defn.outerHTML}</la-akoma-ntoso></div>\n        </div>`);\n    }\n  }\n\n  getDefinition(reference: Element): HTMLElement | null {\n    const term = reference.getAttribute('data-refersto');\n    // find where the term is defined\n    if (this.akomaNtosoElement) {\n      return this.akomaNtosoElement.querySelector(`[data-defines=\"${term}\"]`);\n    }\n    return null;\n  }\n\n  makeTermLinks() {\n    if (this.akomaNtosoElement) {\n      this.akomaNtosoElement.addEventListener('click', (e) => {\n        if (e.target && e.target instanceof HTMLElement) {\n          const el= e.target as HTMLElement;\n          if (el.classList.contains('akn-term')) {\n            const termId: string = (el.dataset.refersto || '').replace('#', '');\n            if (termId) {\n              window.location.hash = `#defn-${termId}`;\n            }\n          }\n        }\n      });\n    }\n  }\n}\n"],"mappings":";;;mHAAA,MAAMA,EAAmB,4wMACzB,MAAAC,EAAeD,E,MCSFE,EAAa,M,yBAGdC,KAAAC,eAAiB,wDAEjBD,KAAAE,QAAmB,G,gDAeF,M,eAKP,K,CAEpB,iBAAAC,GACE,MAAMC,EAAS,IAAIC,EAAiBL,KAAKM,GAAIN,KAAKO,YAAY,KAC5DP,KAAKQ,kBAAkB,IAEzBR,KAAKS,kBAAoBL,EAAOM,aAChCV,KAAKW,eAAiBC,SAASC,cAAc,OAC7Cb,KAAKW,eAAeG,UAAY,2BAChCF,SAASG,KAAKC,YAAYhB,KAAKW,e,CAGjC,gBAAAH,GACE,GAAIR,KAAKS,kBAAmB,CAC1BT,KAAKiB,mBAEL,GAAIjB,KAAKkB,UAAW,CAClBlB,KAAKmB,e,CAGPnB,KAAKoB,uBAAuBpB,KAAKqB,iB,EAKrC,sBAAAD,CAAuBE,GAErB,IAAK,MAAMC,KAASvB,KAAKE,QAAS,CAChCqB,EAAMC,S,CAERxB,KAAKE,QAAU,GAEf,GAAIF,KAAKS,mBAAqBa,EAAO,CACnCtB,KAAKyB,c,CAGPzB,KAAK0B,kB,CAIP,eAAAC,GACE3B,KAAK0B,kB,CAGP,gBAAAA,GACE,GAAI1B,KAAKS,kBAAmB,CAC1BT,KAAKS,kBAAkBmB,UAAUC,OAAO,aAAc7B,KAAKkB,WAAalB,KAAKqB,kBAC7ErB,KAAKS,kBAAkBmB,UAAUC,OAAO,aAAc7B,KAAKkB,U,EAK/D,gBAAAD,GACE,GAAIjB,KAAKS,kBAAmB,CAC1BqB,MAAMC,KAAK/B,KAAKS,kBAAkBuB,iBAA8B,4BAA4BC,SAASC,I,MACnG,MAAMC,GAAOC,EAAAF,EAAIG,aAAa,oBAAgB,MAAAD,SAAA,SAAAA,EAAEE,QAAQ,IAAK,IAC7D,MAAMC,EAA8BL,EAAIK,QAAQvC,KAAKC,gBACrD,GAAIsC,GAAWJ,EAAM,CACnBI,EAAQC,QAAQC,QAAUP,EAAIM,QAAQE,SACtCH,EAAQI,aAAa,KAAM,QAAQR,I,MAM3C,YAAAV,GAEEzB,KAAKE,QAAUqB,EAAMvB,KAAKS,kBAAkBuB,iBAAiB,aAAc,CACzEY,SAAU,IAAM5C,KAAKW,eACrBkC,UAAW,KACXC,QAAS,GACTC,YAAa,KACbC,YAAa,KACbC,SAAU,IACVC,UAAWlD,KAAKkD,UAAUC,KAAKnD,MAC/BoD,MAAO,gB,CAIX,SAAAF,CAAU3B,GACR,MAAM8B,EAAmB9B,EAAM+B,UAC/B,MAAMC,EAA2BvD,KAAKwD,cAAcH,GAEpD,GAAIE,EAAM,CACRhC,EAAMkC,WAAW,gEAEuBJ,EAAIK,+EACWH,EAAKI,mD,EAKhE,aAAAH,CAAcF,GACZ,MAAMnB,EAAOmB,EAAUjB,aAAa,iBAEpC,GAAIrC,KAAKS,kBAAmB,CAC1B,OAAOT,KAAKS,kBAAkBmD,cAAc,kBAAkBzB,M,CAEhE,OAAO,I,CAGT,aAAAhB,GACE,GAAInB,KAAKS,kBAAmB,CAC1BT,KAAKS,kBAAkBoD,iBAAiB,SAAUC,IAChD,GAAIA,EAAE1D,QAAU0D,EAAE1D,kBAAkB2D,YAAa,CAC/C,MAAMzD,EAAIwD,EAAE1D,OACZ,GAAIE,EAAGsB,UAAUoC,SAAS,YAAa,CACrC,MAAMC,GAAkB3D,EAAGkC,QAAQE,UAAY,IAAIJ,QAAQ,IAAK,IAChE,GAAI2B,EAAQ,CACVC,OAAOC,SAASC,KAAO,SAASH,G","ignoreList":[]}