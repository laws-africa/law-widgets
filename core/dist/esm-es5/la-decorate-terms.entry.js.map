{"version":3,"names":["decorateTermsCss","LaDecorateTermsStyle0","DecorateTerms","this","defnContainers","tippies","prototype","componentWillLoad","_this","target","AkomaNtosoTarget","el","akomaNtoso","componentDidLoad","akomaNtosoElement","getElement","tippyContainer","document","createElement","className","body","appendChild","setupDefinitions","linkTerms","makeTermLinks","changePopupDefinitions","popupDefinitions","popup","_i","_b","length","tippy_1","destroy","createPopups","toggleCssClasses","changeLinkTerms","classList","toggle","Array","from","querySelectorAll","forEach","def","term","_a","getAttribute","replace","closest","dataset","defines","refersto","setAttribute","concat","tippy","appendTo","allowHTML","content","hideOnClick","interactive","maxWidth","onTrigger","bind","theme","ref","reference","defn","getDefinition","setContent","innerText","outerHTML","querySelector","addEventListener","e","HTMLElement","contains","termId","window","location","hash"],"sources":["src/components/decorate-terms/decorate-terms.scss?tag=la-decorate-terms","src/components/decorate-terms/decorate-terms.tsx"],"sourcesContent":["@use \"sass:meta\";\n\n.la-decorate-terms__popup {\n  position: relative;\n  @include meta.load-css(\"~tippy.js/dist/tippy.css\");\n  @include meta.load-css(\"~tippy.js/themes/light-border.css\");\n  @include meta.load-css(\"../../styles/tippy\");\n}\n\nla-akoma-ntoso.show-terms .akn-term {\n  text-decoration: underline dotted;\n}\n\nla-akoma-ntoso.link-terms .akn-term {\n  cursor: pointer;\n}\n","import { Component, Prop, Element, Watch } from '@stencil/core';\nimport type { Instance as Tippy } from 'tippy.js';\nimport tippy from 'tippy.js';\n\nimport { AkomaNtosoTarget } from '../../utils/linking';\n\n@Component({\n  tag: 'la-decorate-terms',\n  styleUrl: 'decorate-terms.scss',\n})\nexport class DecorateTerms {\n  // The akn content element being decorated\n  protected akomaNtosoElement?: HTMLElement | null;\n  protected defnContainers = '.akn-p, .akn-subsection, .akn-section, .akn-blockList';\n\n  protected tippies: Tippy[] = [];\n  protected tippyContainer?: HTMLElement;\n\n  @Element() el!: HTMLElement;\n\n  /**\n   * CSS selector for the la-akoma-ntoso element and HTMLElement that will be decorated. Defaults\n   * to the containing la-akoma-ntoso element, if any, otherwise the first\n   * `la-akoma-ntoso` element on the page.\n   */\n  @Prop() akomaNtoso?: string | HTMLElement;\n\n  /**\n   * If `true`, the definitions of terms will be shown as popups.\n   */\n  @Prop() popupDefinitions = false;\n\n  /**\n   * If `true`, terms will be changed to `<a>` elements that jump to the term definition.\n   */\n  @Prop() linkTerms = false;\n\n  componentWillLoad() {\n    const target = new AkomaNtosoTarget(this.el, this.akomaNtoso, () => {\n      this.componentDidLoad();\n    });\n    this.akomaNtosoElement = target.getElement();\n    this.tippyContainer = document.createElement('div');\n    this.tippyContainer.className = 'la-decorate-terms__popup';\n    document.body.appendChild(this.tippyContainer);\n  }\n\n  componentDidLoad() {\n    if (this.akomaNtosoElement) {\n      this.setupDefinitions();\n\n      if (this.linkTerms) {\n        this.makeTermLinks();\n      }\n\n      this.changePopupDefinitions(this.popupDefinitions);\n    }\n  }\n\n  @Watch('popupDefinitions')\n  changePopupDefinitions(popup: boolean) {\n    // remove existing popups\n    for (const tippy of this.tippies) {\n      tippy.destroy();\n    }\n    this.tippies = [];\n\n    if (this.akomaNtosoElement && popup) {\n      this.createPopups();\n    }\n\n    this.toggleCssClasses();\n  }\n\n  @Watch('linkTerms')\n  changeLinkTerms() {\n    this.toggleCssClasses();\n  }\n\n  toggleCssClasses() {\n    if (this.akomaNtosoElement) {\n      this.akomaNtosoElement.classList.toggle('show-terms', this.linkTerms || this.popupDefinitions);\n      this.akomaNtosoElement.classList.toggle('link-terms', this.linkTerms);\n    }\n  }\n\n  // tag term definition containers\n  setupDefinitions() {\n    if (this.akomaNtosoElement) {\n      Array.from(this.akomaNtosoElement.querySelectorAll<HTMLElement>('.akn-def[data-refersto]')).forEach((def) => {\n        const term = def.getAttribute('data-refersto')?.replace('#', '');\n        const closest: HTMLElement | null = def.closest(this.defnContainers);\n        if (closest && term) {\n          closest.dataset.defines = def.dataset.refersto;\n          closest.setAttribute('id', `defn-${term}`);\n        }\n      });\n    }\n  }\n\n  createPopups() {\n    // @ts-ignore\n    this.tippies = tippy(this.akomaNtosoElement.querySelectorAll('.akn-term'), {\n      appendTo: () => this.tippyContainer,\n      allowHTML: true,\n      content: '',\n      hideOnClick: true,\n      interactive: true,\n      maxWidth: 450,\n      onTrigger: this.onTrigger.bind(this),\n      theme: 'light-border',\n    });\n  }\n\n  onTrigger(tippy: Tippy) {\n    const ref: HTMLElement = tippy.reference as HTMLElement;\n    const defn: HTMLElement | null = this.getDefinition(ref);\n\n    if (defn) {\n      tippy.setContent(`\n        <div>\n          <div class=\"tippy-content__title\">${ref.innerText}</div>\n          <div class=\"tippy-content__body\"><la-akoma-ntoso>${defn.outerHTML}</la-akoma-ntoso></div>\n        </div>`);\n    }\n  }\n\n  getDefinition(reference: Element): HTMLElement | null {\n    const term = reference.getAttribute('data-refersto');\n    // find where the term is defined\n    if (this.akomaNtosoElement) {\n      return this.akomaNtosoElement.querySelector(`[data-defines=\"${term}\"]`);\n    }\n    return null;\n  }\n\n  makeTermLinks() {\n    if (this.akomaNtosoElement) {\n      this.akomaNtosoElement.addEventListener('click', (e) => {\n        if (e.target && e.target instanceof HTMLElement) {\n          const el= e.target as HTMLElement;\n          if (el.classList.contains('akn-term')) {\n            const termId: string = (el.dataset.refersto || '').replace('#', '');\n            if (termId) {\n              window.location.hash = `#defn-${termId}`;\n            }\n          }\n        }\n      });\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}