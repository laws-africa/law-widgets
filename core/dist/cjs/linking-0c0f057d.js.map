{"file":"linking-0c0f057d.js","mappings":";;;;;SAAgB,oBAAoB,CAAC,SAAkB,EAAE,QAA+B;IACtF,IAAI,QAAQ,EAAE;QACZ,OAAO,QAAQ,YAAY,WAAW,GAAG,QAAQ,GAAG,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KACrG;;IAGD,IAAI,EAAE,GAAuB,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAEjE,IAAI,CAAC,EAAE,EAAE;;QAEP,EAAE,GAAG,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;KAC9D;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAMD;;;MAGa,gBAAgB;IAO3B,YACE,SAAkB,EAClB,QAA0C,EAC1C,QAAyC;QAEzC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;QAGjC,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE;YAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC;gBACnC,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SACzD;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB;KACF;IAED,UAAU;QACR,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;IAED,WAAW;QACT,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,YAAY,WAAW;kBACvC,IAAI,CAAC,QAAQ;kBACb,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/D;;QAGD,IAAI,EAAE,GAAuB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEtE,IAAI,CAAC,EAAE,EAAE;;YAEP,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;SACnE;QAED,OAAO,EAAE,CAAC;KACX;;IAGD,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ;YAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;KACpC;;;;;;","names":[],"sources":["src/utils/linking.ts"],"sourcesContent":["export function getAkomaNtosoElement(component: Element, selector?: string | HTMLElement): HTMLElement | null {\n  if (selector) {\n    return selector instanceof HTMLElement ? selector : component.ownerDocument.querySelector(selector);\n  }\n\n  // try the nearest ancestor\n  let el: HTMLElement | null = component.closest('la-akoma-ntoso');\n\n  if (!el) {\n    // try the first on the page\n    el = component.ownerDocument.querySelector('la-akoma-ntoso');\n  }\n\n  return el;\n}\n\ninterface TargetDomChangedCallback {\n  (): void;\n}\n\n/**\n * Helper class that finds an Akoma Ntoso target element on the page, and monitors it for changes.\n */\nexport class AkomaNtosoTarget {\n  selector: string | HTMLElement | undefined;\n  component: Element;\n  target: HTMLElement | null;\n  observer: MutationObserver | null;\n  callback: TargetDomChangedCallback | null;\n\n  constructor(\n    component: Element,\n    selector: string | HTMLElement | undefined,\n    callback: TargetDomChangedCallback | null\n  ) {\n    this.component = component;\n    this.selector = selector;\n    this.callback = callback;\n    this.target = this.findElement();\n\n    // setup a watcher to callback if the target content changes\n    if (this.target && window.MutationObserver) {\n      this.observer = new MutationObserver(() => {\n        this.targetDomChanged();\n      });\n      this.observer.observe(this.target, { childList: true });\n    } else {\n      this.observer = null;\n    }\n  }\n\n  getElement(): HTMLElement | null {\n    return this.target;\n  }\n\n  findElement(): HTMLElement | null {\n    if (this.selector) {\n      return this.selector instanceof HTMLElement\n        ? this.selector\n        : this.component.ownerDocument.querySelector(this.selector);\n    }\n\n    // try the nearest ancestor\n    let el: HTMLElement | null = this.component.closest('la-akoma-ntoso');\n\n    if (!el) {\n      // try the first on the page\n      el = this.component.ownerDocument.querySelector('la-akoma-ntoso');\n    }\n\n    return el;\n  }\n\n  /** The target's dom changed */\n  targetDomChanged() {\n    if (this.callback) this.callback();\n  }\n}\n"],"version":3}